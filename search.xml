<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis系列篇：两种持久化方式的对比</title>
      <link href="/2019/11/24/persistence/"/>
      <url>/2019/11/24/persistence/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2019/11/16/16e730fd4f43da69?w=700&h=150&f=png&s=63173" alt=""></p><ul><li><p>Redis的两种持久化的方式：RDB（快照）和 AOF（追加式）。</p></li><li><p>RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照。</p></li><li><p>AOF持久化方式则会记录每一个服务器收到的写操作。</p></li></ul><a id="more"></a><blockquote><p><a href="https://segmentfault.com/a/1190000002906345#articleHeader20" target="_blank" rel="noopener">文章参考来源</a></p><p>Github issues文章地址 : <a href="https://github.com/littlejoyo/Blog/issues/4" target="_blank" rel="noopener">https://github.com/littlejoyo/Blog/issues/4</a></p></blockquote><h1 id="Redis的两种持久化方式"><a href="#Redis的两种持久化方式" class="headerlink" title="Redis的两种持久化方式"></a>Redis的两种持久化方式</h1><blockquote><p>分别是RDB（快照）和 AOF（追加式）</p></blockquote><ul><li><p>RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照。</p></li><li><p>AOF持久化方式则会记录每一个服务器收到的写操作。在服务启动时，这些记录的操作会逐条执行从而重建出原来的数据。写操作命令记录会以追加的方式进行保存。</p></li><li><p>两种方式的持久化是可以同时存在的，但是当Redis重启时，AOF文件会被优先用于重建数据。</p></li><li><p>Redis加载持久化数据流程：</p></li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/11/16/16e739f935819f03?w=1008&h=1158&f=png&s=337074" alt="Redis加载持久化数据流程"></p><h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul><li><p>Redis调用fork()，产生一个子进程。</p></li><li><p>子进程把数据写到一个临时的RDB文件。</p></li><li><p>当子进程写完新的RDB文件后，把旧的RDB文件替换掉。</p></li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><p>RDB文件是一个很简洁的单文件，它保存了某个时间点的Redis数据，很适合用于做备份。你可以设定一个时间点对RDB文件进行归档，这样就能在需要的时候很轻易的把数据恢复到不同的版本。</p></li><li><p>基于上面所描述的特性，RDB很适合用于灾备。单文件很方便就能传输到远程的服务器上。</p></li><li><p>RDB的性能很好，需要进行持久化时，主进程会fork一个子进程出来，然后把持久化的工作交给子进程，自己不会有相关的I/O操作。</p></li><li><p>比起AOF，在数据量比较大的情况下，RDB的启动速度更快。</p></li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li><p>RDB容易造成数据的丢失。假设每5分钟保存一次快照，如果Redis因为某些原因不能正常工作，那么从上次产生快照到Redis出现问题这段时间的数据就会丢失了。</p></li><li><p>RDB使用fork()产生子进程进行数据的持久化，如果数据比较大的话可能就会花费点时间，造成Redis停止服务几毫秒。</p></li><li><p>如果数据量很大且CPU性能不是很好的时候，停止服务的时间甚至会到1秒。</p></li></ul><h2 id="文件路径和名称"><a href="#文件路径和名称" class="headerlink" title="文件路径和名称"></a>文件路径和名称</h2><ul><li><p>默认Redis会把RDB快照文件存储为当前目录下一个名为<code>dump.rdb</code>的文件。</p></li><li><p>如果要修改文件的存储路径和名称，可以通过修改配置文件<code>redis.conf</code>实现：</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">RDB</span>文件名，默认为<span class="selector-tag">dump</span><span class="selector-class">.rdb</span>。</span><br><span class="line"><span class="selector-tag">dbfilename</span> <span class="selector-tag">dump</span><span class="selector-class">.rdb</span></span><br><span class="line"></span><br><span class="line"># 文件存放的目录，<span class="selector-tag">AOF</span>文件同样存放在此目录下。默认为当前工作目录。</span><br><span class="line">dir ./</span><br></pre></td></tr></table></figure><h2 id="RDB的启用和禁用（保存点）"><a href="#RDB的启用和禁用（保存点）" class="headerlink" title="RDB的启用和禁用（保存点）"></a>RDB的启用和禁用（保存点）</h2><ul><li><p>保存点可以进行配置，使Redis如果在每N秒后数据发生了M次改变就保存快照文件。</p></li><li><p>例如下面这个保存点配置表示每60秒，如果数据发生了1000次以上的变动，Redis就会自动保存快照文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save 60 1000</span><br></pre></td></tr></table></figure></li><li><p>保存点可以设置多个，Redis的配置文件就默认设置了3个保存点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 格式为：save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"># 可以设置多个。</span><br><span class="line">save 900 1 #900秒后至少1个key有变动</span><br><span class="line">save 300 10 #300秒后至少10个key有变动</span><br><span class="line">save 60 10000 #60秒后至少10000个key有变动</span><br></pre></td></tr></table></figure></li><li><p>如果想禁用快照保存的功能，可以通过注释掉所有”save”配置达到，或者在最后一条”save”配置后添加如下的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save &quot;&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="错误处理和提醒"><a href="#错误处理和提醒" class="headerlink" title="错误处理和提醒"></a>错误处理和提醒</h2><ul><li><p>默认情况下，如果Redis在后台生成快照的时候失败，那么就会停止接收数据，目的是让用户能知道数据没有持久化成功。</p></li><li><p>但是如果你有其他的方式可以监控到Redis及其持久化的状态，那么可以把这个功能禁止掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop-writes-on-bgsave-error yes</span><br></pre></td></tr></table></figure><h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2></li><li><p>默认Redis会采用<code>LZF</code>对数据进行压缩。</p></li><li><p>如果你想节省点CPU的性能，你可以把压缩功能禁用掉，但是数据集就会比没压缩的时候要大。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdbcompression yes</span><br></pre></td></tr></table></figure><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2></li><li><p>从版本5的RDB的开始，一个<code>CRC64</code>的校验码会放在文件的末尾。这样更能保证文件的完整性，但是在保存或者加载文件时会损失一定的性能（大概10%）。</p></li><li><p>如果想追求更高的性能，可以把它禁用掉，这样文件在写入校验码时会用<code>0</code>替代，加载的时候看到<code>0</code>就会直接跳过校验。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure><h2 id="手动生成快照备份数据"><a href="#手动生成快照备份数据" class="headerlink" title="手动生成快照备份数据"></a>手动生成快照备份数据</h2><blockquote><p>Redis提供了两个命令用于生成快照</p></blockquote></li></ul><h3 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h3><ul><li><p>SAVE命令会使用同步的方式生成RDB快照文件，这意味着在这个过程中会阻塞所有其他客户端的请求。</p></li><li><p>因此不建议在生产环境使用这个命令，除非因为某种原因需要去阻止Redis使用子进程进行后台生成快照（例如调用<code>fork(2)</code>出错）。</p></li></ul><h3 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h3><ul><li><p><code>BGSAVE</code>命令使用后台的方式保存RDB文件，调用此命令后，会立刻返回<code>OK</code>返回码。</p></li><li><p>Redis会产生一个子进程进行处理并立刻恢复对客户端的服务。</p></li><li><p>在客户端我们可以使用<code>LASTSAVE</code>命令查看操作是否成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br><span class="line">Background saving started</span><br><span class="line">127.0.0.1:6379&gt; LASTSAVE</span><br><span class="line">(integer) 1433936394</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：配置文件里禁用了快照生成功能不影响SAVE和BGSAVE命令的效果。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/11/16/16e73a018e1da2a2?w=527&h=381&f=png&s=113921" alt="RDB持久化方式"></p><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><ul><li><p>快照并不是很可靠。如果你的电脑突然宕机了，或者电源断了，又或者不小心杀掉了进程，那么最新的数据就会丢失。</p></li><li><p>但是AOF文件则提供了一种更为可靠的持久化方式。每当Redis接受到会修改数据集的命令时，就会把命令追加到AOF文件里。</p></li><li><p>当你重启Redis时，AOF里的命令会被重新执行一次，重建数据。</p></li></ul><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><ul><li><p>比RDB可靠。你可以制定不同的<code>fsync</code>策略：<strong>不进行<code>fsync</code></strong>、<strong>每秒<code>fsync</code>一次</strong>和<strong>每次查询进行fsync</strong>。</p></li><li><p>默认是<strong>每秒fsync一次</strong>。这意味着你最多丢失一秒钟的数据。</p></li><li><p>AOF日志文件是一个纯追加的文件。就算是遇到突然停电的情况，也不会出现日志的定位或者损坏问题。甚至如果因为某些原因（例如磁盘满了）命令只写了一半到日志文件里，我们也可以用<code>redis-check-aof</code>这个工具很简单的进行修复。</p></li><li><p>当AOF文件太大时，Redis会自动在后台进行重写。重写很安全，因为重写是在一个新的文件上进行，同时Redis会继续往旧的文件追加数据。</p></li><li><p>新文件上会写入能重建当前数据集的最小操作命令的集合。当新文件重写完，Redis会把新旧文件进行切换，然后开始把数据写到新文件上。</p></li><li><p>AOF把操作命令以简单易懂的格式一条接一条的保存在文件里，很容易导出来用于恢复数据。</p></li><li><p>例如我们不小心用<code>FLUSHALL</code>命令把所有数据刷掉了，只要文件没有被重写，我们可以把服务停掉，把最后那条命令删掉，然后重启服务，这样就能把被刷掉的数据恢复回来。</p></li></ul><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ul><li><p>在相同的数据集下，AOF文件的大小一般会比RDB文件大。</p></li><li><p>在某些<code>fsync</code>策略下，AOF的速度会比RDB慢。</p></li><li><p>通常<code>fsync</code>设置为<strong>每秒一次</strong>就能获得比较高的性能，而在禁止<code>fsync</code>的情况下速度可以达到RDB的水平。</p></li></ul><h2 id="启用AOF"><a href="#启用AOF" class="headerlink" title="启用AOF"></a>启用AOF</h2><ul><li><p>把配置项<code>appendonly</code>设为<code>yes</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><h2 id="文件路径和名称-1"><a href="#文件路径和名称-1" class="headerlink" title="文件路径和名称"></a>文件路径和名称</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 文件存放目录，与RDB共用。默认为当前工作目录。</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"># 默认文件名为appendonly.aof</span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br></pre></td></tr></table></figure><h2 id="Redis的三种fsync方式"><a href="#Redis的三种fsync方式" class="headerlink" title="Redis的三种fsync方式"></a>Redis的三种fsync方式</h2></li><li><p>每当有新命令追加到AOF的时候调用fsync。速度最慢，但是最安全。</p></li><li><p>每秒fsync一次。速度快（2.4版本跟快照方式速度差不多），安全性不错（最多丢失1秒的数据）。</p></li><li><p>从不fsync，交由系统去处理。这个方式速度最快，但是安全性一般。</p></li></ul><p>推荐使用每秒fsync一次的方式（默认的方式），因为它速度快，安全性也不错。相关配置如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/11/16/16e73a0767dedc7a?w=1616&h=664&f=png&s=294472" alt="aof"></p><h2 id="日志重写"><a href="#日志重写" class="headerlink" title="日志重写"></a>日志重写</h2><blockquote><p>随着写操作的不断增加，AOF文件会越来越大。例如你递增一个计数器100次，那么最终结果就是数据集里的计数器的值为最终的递增结果，但是AOF文件里却会把这100次操作完整的记录下来。而事实上要恢复这个记录，只需要1个命令就行了，也就是说AOF文件里那100条命令其实可以精简为1条。所以Redis支持这样一个功能：在不中断服务的情况下在后台重建AOF文件。</p></blockquote><p>工作原理如下：</p><ul><li><p>Redis调用fork()，产生一个子进程。</p></li><li><p>子进程把新的AOF写到一个临时文件里。</p></li><li><p>主进程持续把新的变动写到内存里的buffer，同时也会把这些新的变动写到旧的AOF里，这样即使重写失败也能保证数据的安全。</p></li><li><p>当子进程完成文件的重写后，主进程会获得一个信号，然后把内存里的buffer追加到子进程生成的那个新AOF里。</p></li><li><p>我们可以通过配置设置日志重写的条件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Redis会记住自从上一次重写后AOF文件的大小（如果自Redis启动后还没重写过，则记住启动时使用的AOF文件的大小）。</span><br><span class="line"># 如果当前的文件大小比起记住的那个大小超过指定的百分比，则会触发重写。</span><br><span class="line"># 同时需要设置一个文件大小最小值，只有大于这个值文件才会重写，以防文件很小，但是已经达到百分比的情况。</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line">auto-aof-rewrite-min-size <span class="number">64</span>mb</span><br></pre></td></tr></table></figure></li><li><p>要禁用自动的日志重写功能，我们可以把百分比设置为0：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Redis 2.4以上才可以自动进行日志重写，之前的版本需要手动运行<code>BGREWRITEAOF</code>这个命令。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/11/16/16e73a0aea7f590d?w=1608&h=914&f=png&s=478530" alt="日志重写"></p><h2 id="数据损坏修复"><a href="#数据损坏修复" class="headerlink" title="数据损坏修复"></a>数据损坏修复</h2><p>如果因为某些原因（例如服务器崩溃）AOF文件损坏了，导致Redis加载不了，可以通过以下方式进行修复：</p><p>1.备份AOF文件。</p><p>2.使用<code>redis-check-aof</code>命令修复原始的AOF文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-check-aof --fix</span><br></pre></td></tr></table></figure><p>3.可以使用<code>diff -u</code>命令看下两个文件的差异。</p><p>4.使用修复过的文件重启Redis服务。</p><h2 id="从RDB切换到AOF"><a href="#从RDB切换到AOF" class="headerlink" title="从RDB切换到AOF"></a>从RDB切换到AOF</h2><blockquote><p>这里只说Redis &gt;= 2.2版本的方式：</p></blockquote><ul><li><p>备份一个最新的<code>dump.rdb</code>的文件，并把备份文件放在一个安全的地方。</p></li><li><p>运行以下两条命令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli config set appendonly yes</span><br><span class="line">$ redis-cli config set save <span class="string">""</span></span><br></pre></td></tr></table></figure></li><li><p>确保数据跟切换前一致。</p></li><li><p>确保数据正确的写到AOF文件里。</p></li></ul><blockquote><p>第二条命令是用来禁用RDB的持久化方式，但是这不是必须的，因为你可以同时启用两种持久化方式。<br>记得对配置文件<code>redis.conf</code>进行编辑启用AOF，因为命令行方式修改配置在重启Redis后就会失效。</p></blockquote><h1 id="Redis数据备份"><a href="#Redis数据备份" class="headerlink" title="Redis数据备份"></a>Redis数据备份</h1><p>建议的备份方法：</p><ul><li><p>创建一个定时任务，每小时和每天创建一个快照，保存在不同的文件夹里。</p></li><li><p>定时任务运行时，把太旧的文件进行删除。例如只保留48小时的按小时创建的快照和一到两个月的按天创建的快照。</p></li><li><p>每天确保一次把快照文件传输到数据中心外的地方进行保存，至少不能保存在Redis服务所在的服务器。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列篇：初识Redis</title>
      <link href="/2019/11/23/redisBasics/"/>
      <url>/2019/11/23/redisBasics/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2019/11/16/16e730fd4f43da69?w=700&h=150&f=png&s=63173" alt=""></p><ul><li>Redis是一款键值对（key-value）形式的NoSql数据库，NoSql = not only Sql，高性能解决高并发的需求。由C语言开发。</li><li>Redis是基于内存的，内存的读写速度非常快，对于数据的读取和写入比常见的关系型数据库快许多。</li></ul><a id="more"></a><h1 id="什么是Redis？"><a href="#什么是Redis？" class="headerlink" title="什么是Redis？"></a>什么是Redis？</h1><ul><li><p>Redis是一款键值对（key-value）形式的NoSql数据库，NoSql = not only Sql，高性能解决高并发的需求。由C语言开发。</p></li><li><p>Redis是基于内存的，内存的读写速度非常快，对于数据的读取和写入比常见的关系型数据库快许多。</p></li><li><p>Redis广泛被应用于并发编程下，主要作用于缓存机制和分布式处理等领域，使系统性能以及并发得到优化。</p></li></ul><h1 id="什么是NoSql？"><a href="#什么是NoSql？" class="headerlink" title="什么是NoSql？"></a>什么是NoSql？</h1><ul><li><p>NoSql意为非关系型数据库，相对于关系型数据库具有更多的灵活应用场景。</p></li><li><p>NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。</p></li><li><p>NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p></li><li><p>NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p></li></ul><h1 id="NoSql的主要四种类型和代表性作品"><a href="#NoSql的主要四种类型和代表性作品" class="headerlink" title="NoSql的主要四种类型和代表性作品"></a>NoSql的主要四种类型和代表性作品</h1><ul><li><p>键值对数据库：Redis</p></li><li><p>列存储数据库：HBase</p></li><li><p>文档类型数据库：MongoDb</p></li><li><p>图形数据库：Neo4J， InfoGrid， Infinite Graph</p></li></ul><h1 id="为什么Redis受欢迎？越来越多的人开始应用Redis？"><a href="#为什么Redis受欢迎？越来越多的人开始应用Redis？" class="headerlink" title="为什么Redis受欢迎？越来越多的人开始应用Redis？"></a>为什么Redis受欢迎？越来越多的人开始应用Redis？</h1><ul><li><p>基于内存，数据读写速度快，单机Redis能处理10W+的请求</p></li><li><p>单线程模型，避免了多线程频繁进行上下文切换的时间消耗</p></li><li><p>支持多种数据结构</p></li><li><p>基于非阻塞的多路复用IO机制</p></li></ul><h1 id="Redis支持什么数据结构？"><a href="#Redis支持什么数据结构？" class="headerlink" title="Redis支持什么数据结构？"></a>Redis支持什么数据结构？</h1><ul><li><p>字符串类型：String</p></li><li><p>哈希类型：Hash</p></li><li><p>列表类型：List</p></li><li><p>集合类型：Set</p></li><li><p>有序集合类型：sort Set</p></li><li><p>Redis中高级用户，还需要加上下面几种数据结构HyperLogLog、Geo、Pub/Sub</p></li><li><p>如果你还想加分，那你说还玩过Redis Module，像BloomFilter，RedisSearch，Redis-ML</p></li></ul><p><a href="http://doc.redisfans.com/" target="_blank" rel="noopener">Redis中文api参考1</a></p><p><a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">Redis中文api参考2</a></p><h1 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h1><ul><li>数据缓存</li><li>任务队列</li><li>应用排行榜</li><li>网站访问统计</li><li>数据统计处理</li><li>分布式集群架构中的分布式锁</li></ul><h1 id="Redis的数据持久化方式"><a href="#Redis的数据持久化方式" class="headerlink" title="Redis的数据持久化方式"></a>Redis的数据持久化方式</h1><ul><li>RDB（快照）</li><li>AOF（追加式）</li><li>无持久化</li><li>同时使用RDB和AOF</li></ul><h1 id="Redis的两种持久化的对比"><a href="#Redis的两种持久化的对比" class="headerlink" title="Redis的两种持久化的对比"></a>Redis的两种持久化的对比</h1><ul><li><p>RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照。（1小时或者半小时）</p></li><li><p>AOF持久化方式则会记录每一个服务器收到的写操作。在服务启动时，这些记录的操作会逐条执行从而重建出原来的数据。写操作命令记录的格式跟Redis协议一致，以追加的方式进行保存。</p></li><li><p>Redis的持久化是可以禁用的，就是说你可以让数据的生命周期只存在于服务器的运行时间里。</p></li><li><p>两种方式的持久化是可以同时存在的，但是当Redis重启时，AOF文件会被优先用于重建数据。</p></li><li><p>RDB很适合用于做备份。你可以设定一个时间点对RDB文件进行归档，这样就能在需要的时候很轻易的把数据恢复到不同的版本。比起AOF，在数据量比较大的情况下，RDB的启动速度更快。</p></li><li><p>RDB最大的缺点：RDB容易造成数据的丢失。假设每5分钟保存一次快照，如果Redis因为某些原因不能正常工作，那么从上次产生快照到Redis出现问题这段时间的数据就会丢失了。</p></li><li><p>AOF比RDB可靠。你可以制定不同的fsync策略：不进行fsync、每秒fsync一次和每次查询进行fsync。默认是每秒fsync一次。这意味着你最多丢失一秒钟的数据。不会出现停电后数据丢失的情况。</p></li><li><p>AOF的缺点就是在相同的数据集下，AOF文件的大小一般会比RDB文件大。在某些fsync策略下，AOF的速度会比RDB慢。通常fsync设置为每秒一次就能获得比较高的性能，而在禁止fsync的情况下速度可以达到RDB的水平。</p></li></ul><h1 id="三种键过期策略"><a href="#三种键过期策略" class="headerlink" title="三种键过期策略"></a>三种键过期策略</h1><blockquote><p>Redis是基于键值对的储存方式存放在内存中的,因此，及时对内存中的键值进行清理是非常有必要的</p></blockquote><h2 id="定时过期"><a href="#定时过期" class="headerlink" title="定时过期"></a>定时过期</h2><ul><li><p>每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。</p></li><li><p>该策略可以立即清除过期的数据，对内存很友好；</p></li><li><p>但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</p></li></ul><h2 id="惰性过期"><a href="#惰性过期" class="headerlink" title="惰性过期"></a>惰性过期</h2><ul><li><p>只有当访问一个key时，才会判断该key是否已过期，过期则清除。</p></li><li><p>该策略可以最大化地节省CPU资源，却对内存非常不友好。</p></li><li><p>极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。</p></li></ul><h2 id="定期过期"><a href="#定期过期" class="headerlink" title="定期过期"></a>定期过期</h2><ul><li><p>每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。</p></li><li><p>该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。</p></li><li><p>Redis中同时使用了惰性过期和定期过期两种过期策略。</p></li></ul><h1 id="Redis的淘汰策略"><a href="#Redis的淘汰策略" class="headerlink" title="Redis的淘汰策略"></a>Redis的淘汰策略</h1><h2 id="什么时候触发？"><a href="#什么时候触发？" class="headerlink" title="什么时候触发？"></a>什么时候触发？</h2><p>Redis的内存淘汰策略，是指当内存使用达到maxmemory极限时，需要使用LAU淘汰算法来决定清理掉哪些数据，以保证新数据的存入。</p><h2 id="Redis默认的淘汰策略——LRU"><a href="#Redis默认的淘汰策略——LRU" class="headerlink" title="Redis默认的淘汰策略——LRU"></a>Redis默认的淘汰策略——LRU</h2><ul><li><p>Redis默认情况下就是使用LRU策略算法，LRU算法(least RecentlyUsed),最近最少使用算法,也就是说默认删除最近最少使用的键。</p></li><li><p>要注意一点！Redis中并不会准确的删除所有键中最近最少使用的键，而是随机抽取3个键，删除这三个键中最近最少使用的键。</p></li><li><p>那么3这个数字也是可以设置采样的大小，如果设置为10，那么效果会更好，不过也会耗费更多的CPU资源。</p></li><li><p>对应位置是Redis配置文件中的<code>maxmeory-samples</code>进行设置。</p></li></ul><h2 id="Redis的maxmemory极限"><a href="#Redis的maxmemory极限" class="headerlink" title="Redis的maxmemory极限"></a>Redis的maxmemory极限</h2><ul><li><p>上面说到了当内存达到了maxmemory极限就会触发内存淘汰策略，maxmemory用来设置redis存放数据的最大的内存大小，一旦超出这个内存大小之后，就会立即使用LRU算法清理掉部分数据。</p></li><li><p>对于64 bit的机器，如果maxmemory设置为0，那么就默认不限制内存的使用，直到耗尽机器中所有的内存为止。</p></li><li><p>但是对于32 bit的机器，有一个隐式的闲置就是3GB。</p></li></ul><h2 id="Redis的数据淘汰策略"><a href="#Redis的数据淘汰策略" class="headerlink" title="Redis的数据淘汰策略"></a>Redis的数据淘汰策略</h2><blockquote><p>选择使用哪一种淘汰策略可以到配置文件修改<code>maxmemory-policy</code>字段</p></blockquote><ul><li><p>1）<code>noeviction</code>：当内存不足以容纳新写入数据时，新写入操作会报错。</p></li><li><p>2）<code>allkeys-lru</code>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。</p></li><li><p>3）<code>allkeys-random</code>：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</p></li><li><p>4）<code>volatile-lru</code>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</p></li><li><p>5）<code>volatile-random</code>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</p></li><li><p>6）volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</p></li></ul><h2 id="缓存的清理过程"><a href="#缓存的清理过程" class="headerlink" title="缓存的清理过程"></a>缓存的清理过程</h2><ul><li>1）客户端执行数据写入操作</li><li>2）redis server接收到写入操作之后，检查<code>maxmemory</code>的限制，如果超过了限制，那么就根据对应的policy清理掉部分数据</li><li>3）写入操作完成执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
