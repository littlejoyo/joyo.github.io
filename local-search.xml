<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Linux】依赖Netfilter Hook编写自定义内核模块</title>
    <link href="/2021/12/25/kernel-module/"/>
    <url>/2021/12/25/kernel-module/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是内核模块"><a href="#1-什么是内核模块" class="headerlink" title="1.什么是内核模块"></a>1.什么是内核模块</h1><p>模块是可以根据需要加载和卸载到内核中的代码片段,通过动态挂载的方式可以扩展内核的功能，而无需重启系统。 例如，一种类型的模块是设备驱动程序，它允许内核访问连接到系统的硬件。如果没有内核模块，我们必须修改内核代码，将新功能代码片段兼容添加到内核源码中，然后重新编译内核镜像。<br>除了会让内核越来越大之外，还有一个缺点，即每次我们想要新功能时都需要我们重建和重启内核，并且一旦代码质量过低就会导致内核崩溃的严重事故。</p><blockquote><p>查看系统中的内核模块可以使用<code>lsmod</code>命令查看</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/littlejoyo/cdn/img/20220328220825.png" alt="lsmod"></p><h1 id="2-编写一个简单的内核模块"><a href="#2-编写一个简单的内核模块" class="headerlink" title="2.编写一个简单的内核模块"></a>2.编写一个简单的内核模块</h1><p>下面代码段就是最简单的内核模块，当内核模块挂载成功，通过<code>printk()</code>打印出<code>Hello World!!!</code>,当内核模块卸载成功，通过<code>printk()</code>打印出<code>I am dead.</code>，键入<code>dmesg</code>就可以内核日志。</p><blockquote><p>编写内核模块还要关注当前的内核版本，不同版本某些函数的定义不同，会影响编译是否成功</p></blockquote><p>运行环境：</p><ul><li>Linux版本: CentOS 8.2</li><li>Kernel版本: 4.18.0-348.2.1.el8_5.x86_64</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span>    <span class="hljs-comment">// included for all kernel modules</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span>    <span class="hljs-comment">// included for KERN_INFO</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span>      <span class="hljs-comment">// included for __init and __exit macros</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">hello_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;Hello World!!!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-comment">// Non-zero return means that the module couldn&#x27;t be loaded.</span><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">hello_cleanup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  printk(KERN_INFO <span class="hljs-string">&quot;I am dead.\n&quot;</span>);<br>&#125;<br><br>module_init(hello_init);<br>module_exit(hello_cleanup);<br></code></pre></td></tr></table></figure><ul><li><p><code>module_init()</code>和<code>module_exit()</code>分别为内核模块固定的初始化函数和退出清理函数</p></li><li><p><code>hello_init</code>和<code>hello_cleanup</code>分别为需要被加载的自定义初始化函数和退出函数，内部就是扩展功能代码，能够被加载到内核模块框架</p></li><li><p><code>printk()</code>是内核的日志记录函数，用于记录信息或发出警告，每个<code>printk()</code>都可以带有一个日志优先级，一共有8个优先级，内核有宏，可以在<code>linux/kernel.h</code>中查看宏定义。 如果未指定优先级，则将使用默认优先级<strong>DEFAULT_MESSAGE_LOGLEVEL</strong></p></li></ul><h1 id="3-如何编译内核模块"><a href="#3-如何编译内核模块" class="headerlink" title="3.如何编译内核模块"></a>3.如何编译内核模块</h1><p>编译内核模块需要依赖<strong>Makefile</strong>文件，编译成功后会输出一个后缀名为<code>ko</code>的文件，该文件就是我们编写的内核模块</p><ul><li><p>通过<code>insmod xxx.ko</code>挂载</p></li><li><p>通过<code>rmmod xxx</code>卸载</p></li></ul><p>Makefile文件格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 如果涉及多个文件，就添加多行并指定文件名称</span></span><br>obj-m += hello.o <br><br>all:<br>    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules<br><br>clean:<br>    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean<br></code></pre></td></tr></table></figure><p>保存文件后和内核模块c文件放置在同目录下，然后通过<code>make</code>命令就可以编译出内核模块</p><p><img src="https://cdn.jsdelivr.net/gh/littlejoyo/cdn/img/20220328221035.png" alt="编译模块"></p><p>挂载和卸载内核模块的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/littlejoyo/cdn/img/20220328220510.png" alt="模块效果"></p><h1 id="4-解决编译过程的问题"><a href="#4-解决编译过程的问题" class="headerlink" title="4.解决编译过程的问题"></a>4.解决编译过程的问题</h1><p>执行<code>make</code>编译后出现<code>make: *** /lib/modules/4.18.0-348.2.1.el8_5.x86_64/build/: No such file or directory. Stop.</code>  </p><p>该问题是系统没有安装内核开发包，可以看下<code>/usr/src/kernels/</code>,如果该目录下是空的，则可以说明没有安装内核开发包</p><p>安装内核开发包的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查找yum源支持的版本</span></span><br>yum list |grep kernel <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装开发包</span></span><br>yum install kernel-devel.x86_64<br></code></pre></td></tr></table></figure><p>安装完成后，在<code>/lib/modules/4.18.0-348.2.1.el8_5.x86_64</code>目录下，通过<code>ls -l</code>查看<code>build</code>文件的链接,<br>如果没有指向<code>build -&gt; ../../../../usr/src/kernels/4.18.0-348.2.1.el8_5.x86_64/</code>的链接则需要重新创建一个软链接</p><p>操作命令如下：<br><code>ln -s ../../../../usr/src/kernels/4.18.0-348.2.1.el8_5.x86_64/ build</code> </p><p>创建软链接完成后，重新编译就可以</p><p><img src="https://cdn.jsdelivr.net/gh/littlejoyo/cdn/img/20220328220542.png" alt="查看软链接"></p><h1 id="5-Netfilter-Hook"><a href="#5-Netfilter-Hook" class="headerlink" title="5.Netfilter Hook"></a>5.Netfilter Hook</h1><p>Netfiler框架是Linux防火墙的内核实现，常见的iptables和firewalld本质都是调用Netfilter来实现流量包的处理，另外还提供了hook机制来实现功能扩展，在内核里，每个网络命名空间（network namespace）都给<code>ipv4</code>、<code>ipv6</code>、<code>arp</code>、<code>bridge</code>、<code>decnet</code>等维持一个netfilter钩子列表<code>（struct nf_hook_entries *hooks[5]）</code></p><p>netfilter提供5个hook点：</p><ul><li><code>NF_INET_PRE_ROUTING</code>：刚刚进入网络层的数据包通过此点（刚刚进行完版本号，校验和等检测）， 源地址转换在此点进行；</li><li><code>NF_INET_LOCAL_IN</code>：经路由查找后，送往本机的通过此检查点，INPUT包过滤在此点进行；</li><li><code>NF_INET_FORWARD</code>：转发的包通过此检测点，FORWARD包过滤在此点进行；</li><li><code>NF_INET_LOCAL_OUT</code>：所有马上要通过网卡出去的包通过此检测点，内置的目的地址转换功能（包括地址伪装）在此点进行；</li><li><code>NF_INET_POST_ROUTING</code>：本机进程发出的包通过此检测点，OUTPUT包过滤在此点进行。</li></ul><p>通过这些hook点，可以让我们注册回调函数，扩展流量包处理功能，实现类似NAT、包过滤、追踪记录等，包的走向路径图可以参考下图：</p><p><img src="https://cdn.jsdelivr.net/gh/littlejoyo/cdn/img/20220328220614.png" alt="netfilter"></p><h1 id="6-编写Netfiler-Hook函数"><a href="#6-编写Netfiler-Hook函数" class="headerlink" title="6.编写Netfiler Hook函数"></a>6.编写Netfiler Hook函数</h1><blockquote><p>目标：基于netfilter hook在<code>prerouting</code>和<code>postrouting</code>打印出当前的目的ip和目的port</p></blockquote><p>思路：</p><ol><li>编写hook函数</li><li>将hook函数注册到hook options结构体</li><li>调用<code>nf_register_net_hook</code>和<code>nf_unregister_net_hook</code>完成hook函数的加载和卸载</li></ol><p>Kernel版本为4.18的nf_hook函数定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nf_hookfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *priv,</span><br><span class="hljs-params">                   <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">                   <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_state *state)</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> &#123;</span><br>    <span class="hljs-comment">/* User fills in from here down. */</span><br>    nf_hookfn       *hook;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span>   *<span class="hljs-title">dev</span>;</span><br>    <span class="hljs-type">void</span>            *priv;<br>    <span class="hljs-type">u_int8_t</span>        pf;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>        hooknum;<br>    <span class="hljs-comment">/* Hooks are ordered in ascending priority. */</span><br>    <span class="hljs-type">int</span>         priority;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_state</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hook;<br>    <span class="hljs-type">u_int8_t</span> pf;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> *<span class="hljs-title">in</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> *<span class="hljs-title">out</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock</span> *<span class="hljs-title">sk</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> *<span class="hljs-title">net</span>;</span><br>    <span class="hljs-type">int</span> (*okfn)(<span class="hljs-keyword">struct</span> net *, <span class="hljs-keyword">struct</span> sock *, <span class="hljs-keyword">struct</span> sk_buff *);<br>&#125;;<br></code></pre></td></tr></table></figure><p>关注<code>nf_hook_ops</code>结构体的参数</p><ul><li>nf_hookfn: 自定义的nfhook函数</li><li>pf: 协议簇，主要种类列表<ul><li>PF_INET：ipv4协议</li><li>PF_INET6: ipv6协议</li><li>PF_ARP: arp协议</li><li>PF_BRIDGE: 二层网桥协议</li></ul></li><li>hooknum: 指定加载自定义函数的hook点位置</li><li>priority: 执行优先级<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nf_ip_hook_priorities</span> &#123;</span><br>NF_IP_PRI_FIRST = INT_MIN,<br>NF_IP_PRI_RAW_BEFORE_DEFRAG = <span class="hljs-number">-450</span>,<br>NF_IP_PRI_CONNTRACK_DEFRAG = <span class="hljs-number">-400</span>,<br>NF_IP_PRI_RAW = <span class="hljs-number">-300</span>,<br>NF_IP_PRI_SELINUX_FIRST = <span class="hljs-number">-225</span>,<br>NF_IP_PRI_CONNTRACK = <span class="hljs-number">-200</span>,<br>NF_IP_PRI_MANGLE = <span class="hljs-number">-150</span>,<br>NF_IP_PRI_NAT_DST = <span class="hljs-number">-100</span>,<br>NF_IP_PRI_FILTER = <span class="hljs-number">0</span>,<br>NF_IP_PRI_SECURITY = <span class="hljs-number">50</span>,<br>NF_IP_PRI_NAT_SRC = <span class="hljs-number">100</span>,<br>NF_IP_PRI_SELINUX_LAST = <span class="hljs-number">225</span>,<br>NF_IP_PRI_CONNTRACK_HELPER = <span class="hljs-number">300</span>,<br>NF_IP_PRI_CONNTRACK_CONFIRM = INT_MAX,<br>NF_IP_PRI_LAST = INT_MAX,<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>注意：上面列举的hook点和hook优先级都是指定ip层（三层），如果涉及到bridge还有二层的hook点和hook优先级</p></blockquote><p>涉及bridge的hook点和优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Bridge Hooks */</span><br><span class="hljs-comment">/* After promisc drops, checksum checks. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_BR_PRE_ROUTING0</span><br><span class="hljs-comment">/* If the packet is destined for this box. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_BR_LOCAL_IN1</span><br><span class="hljs-comment">/* If the packet is destined for another interface. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_BR_FORWARD2</span><br><span class="hljs-comment">/* Packets coming from a local process. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_BR_LOCAL_OUT3</span><br><span class="hljs-comment">/* Packets about to hit the wire. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_BR_POST_ROUTING4</span><br><span class="hljs-comment">/* Not really a hook, but used for the ebtables broute table */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_BR_BROUTING5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_BR_NUMHOOKS6</span><br><br><span class="hljs-comment">// 优先级</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nf_br_hook_priorities</span> &#123;</span><br>NF_BR_PRI_FIRST = INT_MIN,<br>NF_BR_PRI_NAT_DST_BRIDGED = <span class="hljs-number">-300</span>,<br>NF_BR_PRI_FILTER_BRIDGED = <span class="hljs-number">-200</span>,<br>NF_BR_PRI_BRNF = <span class="hljs-number">0</span>,<br>NF_BR_PRI_NAT_DST_OTHER = <span class="hljs-number">100</span>,<br>NF_BR_PRI_FILTER_OTHER = <span class="hljs-number">200</span>,<br>NF_BR_PRI_NAT_SRC = <span class="hljs-number">300</span>,<br>NF_BR_PRI_LAST = INT_MAX,<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>netfilter二层和三层之间的路径走向</li></ul><p><img src="https://cdn.jsdelivr.net/gh/littlejoyo/cdn/img/20220328220641.png" alt="netfiter路径"></p><h2 id="6-1-编写hook函数"><a href="#6-1-编写hook函数" class="headerlink" title="6.1 编写hook函数"></a>6.1 编写hook函数</h2><p><strong>prerouting hook 函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// prerouting hook function</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pre_hookfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *priv,</span><br><span class="hljs-params">                        <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">                        <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_state *state)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iphdr</span> *<span class="hljs-title">iph</span> =</span> ip_hdr(skb);<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> *<span class="hljs-title">tcph</span> =</span> tcp_hdr(skb);<br>  printk(KERN_INFO <span class="hljs-string">&quot;prerouting dest ip:port&quot;</span>,ip-&gt;daddr,ntohs(tcph-&gt;dest));<br>  <span class="hljs-keyword">return</span> NF_ACCEPT;<br>&#125;<br></code></pre></td></tr></table></figure><p>**postrouting hook 函数 **</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// postrouting hook function</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">post_hookfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *priv,</span><br><span class="hljs-params">                         <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">                         <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_state *state)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iphdr</span> *<span class="hljs-title">iph</span> =</span> ip_hdr(skb);<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> *<span class="hljs-title">tcph</span> =</span> tcp_hdr(skb);<br>  printk(KERN_INFO <span class="hljs-string">&quot;postrouting dest ip:port&quot;</span>,ip-&gt;daddr,ntohs(tcph-&gt;dest));<br>  <span class="hljs-keyword">return</span> NF_ACCEPT;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-2-注册option"><a href="#6-2-注册option" class="headerlink" title="6.2 注册option"></a>6.2 注册option</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> <span class="hljs-title">in_nfho</span>;</span>  <span class="hljs-comment">//net filter hook option struct</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> <span class="hljs-title">out_nfho</span>;</span> <span class="hljs-comment">//net filter hook option struct</span><br><br><span class="hljs-comment">// nfhook init function</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nf_init_fn</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  in_nfho.hook = pre_hookfn;<br>  in_nfho.pf = PF_INET;<br>  in_nfho.hooknum = NF_INET_PRE_ROUTING;<br>  in_nfho.priority = NF_IP_PRI_FIRST;<br><br>  out_nfho.hook = post_hookfn;<br>  out_nfho.pf = PF_INET;<br>  out_nfho.hooknum = NF_INET_POST_ROUTING;<br>  out_nfho.priority = NF_IP_PRI_FIRST;<br><br>  nf_register_net_hook(&amp;init_net, &amp;in_nfho);<br>  nf_register_net_hook(&amp;init_net, &amp;out_nfho);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-3-完整代码程序"><a href="#6-3-完整代码程序" class="headerlink" title="6.3 完整代码程序"></a>6.3 完整代码程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/ip.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/tcp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/netfilter_ipv4.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> <span class="hljs-title">in_nfho</span>;</span>  <span class="hljs-comment">//net filter hook option struct</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> <span class="hljs-title">out_nfho</span>;</span> <span class="hljs-comment">//net filter hook option struct</span><br><br><span class="hljs-comment">// prerouting hook function</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pre_hookfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *priv,</span><br><span class="hljs-params">                        <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">                        <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_state *state)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iphdr</span> *<span class="hljs-title">iph</span> =</span> ip_hdr(skb);<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> *<span class="hljs-title">tcph</span> =</span> tcp_hdr(skb);<br>  printk(KERN_INFO <span class="hljs-string">&quot;prerouting dest %pI4:%d\n&quot;</span>,&amp;iph-&gt;daddr,ntohs(tcph-&gt;dest));<br>  <span class="hljs-keyword">return</span> NF_ACCEPT;<br>&#125;<br><br><span class="hljs-comment">// postrouting hook function</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">post_hookfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *priv,</span><br><span class="hljs-params">                         <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">                         <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_state *state)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iphdr</span> *<span class="hljs-title">iph</span> =</span> ip_hdr(skb);<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> *<span class="hljs-title">tcph</span> =</span> tcp_hdr(skb);<br>  <span class="hljs-comment">// iph-&gt;saddr = in_aton(&quot;1.1.1.1&quot;); </span><br>  printk(<span class="hljs-string">&quot;postrouting dest %pI4:%d\n&quot;</span>,&amp;iph-&gt;daddr,ntohs(tcph-&gt;dest));<br>  <span class="hljs-keyword">return</span> NF_ACCEPT;<br>&#125;<br><br><span class="hljs-comment">// nfhook init function</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nf_init_fn</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  in_nfho.hook = pre_hookfn;<br>  in_nfho.pf = PF_INET;<br>  in_nfho.hooknum = NF_INET_PRE_ROUTING;<br>  in_nfho.priority = NF_IP_PRI_FIRST;<br><br>  out_nfho.hook = post_hookfn;<br>  out_nfho.pf = PF_INET;<br>  out_nfho.hooknum = NF_INET_POST_ROUTING;<br>  out_nfho.priority = NF_IP_PRI_FIRST;<br><br>  nf_register_net_hook(&amp;init_net, &amp;in_nfho);<br>  nf_register_net_hook(&amp;init_net, &amp;out_nfho);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nfhook_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  printk(<span class="hljs-string">&quot;[+] Register tcp kernel module!\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> nf_init_fn();<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nfhook_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br>  nf_unregister_net_hook(&amp;init_net, &amp;in_nfho);<br>  nf_unregister_net_hook(&amp;init_net, &amp;out_nfho);<br>  printk(KERN_INFO <span class="hljs-string">&quot;[+] Unregister tcp kernel module!\n&quot;</span>);<br>&#125;<br><br>module_init(nfhook_init);<br>module_exit(nfhook_exit);<br></code></pre></td></tr></table></figure><p>挂载效果：</p><p><img src="https://cdn.jsdelivr.net/gh/littlejoyo/cdn/img/20220328220703.png" alt="挂载效果"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内核模块</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
